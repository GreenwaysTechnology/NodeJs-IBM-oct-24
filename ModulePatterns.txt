				Modules Pattern
...................................................................................


In java Modularity , is presented via "Packages"

Package organize the code  logically.

Customer.java

package com.ibm.cms

public class Customer{}

Java organizes code folders and files Physically.

d:/javaapps/src/
    com/ibm/cms/Customer.java

What about javascript Modularity?

 Javascript is file based modularity physically
 but logically there is no such modularity at language level.

collection of variable declarations and function.

Once js started growing in large scale, dev struck to organize code.

2000, Smart developers started thinking about how to modualrize js code.
 

Module design patterns came.

1.Namespace design pattern : 2000 : jquery
2.AMD -Async Module Defintion : dojo
---------------------------------------------------------
3.CJS - Common JS =  namespace + amd:2005 on wards
4.ES 6 Module design pattern:2012-2015  = amd + cjs
------------------------------------------------------------
5.System :2007 = AMD = CJS + ES 6
6.UMD :2008 = NAMESPACE + AMD + CJS = ES 6
....................................................................................
				Commonjs-CJS
.....................................................................................

How to share code? How to import code?

 Code:
  Could be variables,functions,classes.
  Variables can have any literal string,numbers,boolean,objects,functions...

src
  |
  subfolders
|
index.js

Sharing code :

Keywords
exports
module.exports

Imporing code:

require('fileName')
require('folderName/fileName')

exports:
 Used to share more code from the single file.
 exports packs the entire code into one single js object and returns that object

//pack the code 
exports.firstName = 'Subramanian'
exports.lastName = 'Murugan'
exports.salary = 1000
exports.status = true
exports.address = {
    city: 'Coimbatore'
}
exports.skills = ['Java','JavaScript','Node.js']


require:
  It is a function which returns what ever we exported from the file.

const obj= require('fileName')



src/util.myutil.js

//pack the code 
exports.firstName = 'Subramanian'
exports.lastName = 'Murugan'
exports.salary = 1000
exports.status = true
exports.address = {
    city: 'Coimbatore'
}
exports.skills = ['Java', 'JavaScript', 'Node.js']
exports.saySomething = () => "something"

src/index.js
//access the code from the myutil.js 
const res = require('./util/myutil')
console.log(res)

console.log(`${res.firstName} ${res.lastName} ${res.address.city} ${res.salary}`)
console.log(`${res.skills} ${res.status} ${res.saySomething()}`)

node src/index.js
{
  firstName: 'Subramanian',
  lastName: 'Murugan',
  salary: 1000,
  status: true,
  address: { city: 'Coimbatore' },
  skills: [ 'Java', 'JavaScript', 'Node.js' ],
  saySomething: [Function (anonymous)]
}
Subramanian Murugan Coimbatore 1000
Java,JavaScript,Node.js true something
....................................................................................
				module.exports
....................................................................................

Export only one item from the file.

eg"
 if you want to share  "Class"
 if you want to share "array"
 if you want to share "object"



src/services/todo.service.js

class TodoService {
    constructor() {

    }
    //biz apis
    save() {
        return 'save'
    }
    findAll() {
        return 'findAll'
    }
    find() {
        return 'find'
    }
    remove() {
        return 'remove'
    }
}
// module.exports = TodoService

//return object 
module.exports = new TodoService()


src/index.js
// const TodoService = require('./services/todo.service')
const todoService = require('./services/todo.service')

// let service = new TodoService()

// console.log(service.save())
// console.log(service.findAll())

console.log(todoService.save())
console.log(todoService.findAll())

.................................................................................
				 Returning data
.................................................................................

src/mockdata/todo.mock.js


const TODOS = require('../mockdata/todo')
class TodoService {
    constructor() {

    }
    //biz apis
    save() {
        return 'save'
    }
    findAll() {
        return TODOS
    }
    find() {
        return 'find'
    }
    remove() {
        return 'remove'
    }
}
// module.exports = TodoService

//return object 
module.exports = new TodoService()

src/index.js
// const TodoService = require('./services/todo.service')
const todoService = require('./services/todo.service')

// let service = new TodoService()

// console.log(service.save())
// console.log(service.findAll())

console.log(todoService.save())
console.log(todoService.findAll())

.....................................................................................
			Async Programming and Modules
.....................................................................................

I have apis which encapsulated inside object(class), Those apis are async api.

Api design could be

1.callback based

2.Promise based

Who ever going to use Api

1.pass callback
2.get Promise and use then and catch
3.get Promise and use async, await.


steps:

Data
1.src/data/products.js

const PRODUCTS = [
    {
        id:1,
        name:'Phone',
        qty:100,
        price:12000
    },
    {
        id:2,
        name:'Watch',
        qty:33,
        price:4500
    }
]
module.exports = PRODUCTS

2.services- api

Types of api
1.sync api
2.async api
  -callback 
  -promise

sync api:
const PRDOUCTS = require('../data/products')

class ProductService {
    constructor() {
        console.log('Product Service initalized')
    }
    //apis
    getProducts() {
        return PRDOUCTS
    }
}
module.exports = new ProductService()

const productService = require('./services/product.service')

function main() {
    //call sync service
    console.log('start')
    const products = productService.getProducts()
    console.log(products)
    console.log('end')
}
main()
..................................
Async Api:

1.callback based:
.................
src/services/product.service.js
const PRDOUCTS = require('../data/products')

class ProductService {
    constructor() {
        console.log('Product Service initalized')
    }
    //async api with callback
    listProducts(resolve, reject) {
        if (PRDOUCTS) {
            setTimeout(resolve, 5000, PRDOUCTS)
        } else {
            setTimeout(reject, 5000, { message: 'Products Not Found' })

        }
    }
}
module.exports = new ProductService()


src/index.js
const productService = require('./services/product.service')

function main() {
    //call async service
    console.log('start')
    productService.listProducts(products => {
        console.log(products)
    }, err => {
        console.log(err)
    })
    console.log('end')
}
main()

Using Promises: with then and catch
....................................
src/services/products.js
const PRDOUCTS = require('../data/products')

class ProductService {
    constructor() {
        console.log('Product Service initalized')
    }
    //async api with Promise
    findAll() {
        return new Promise((resolve, reject) => {
            if (PRDOUCTS) {
                setTimeout(resolve, 5000, PRDOUCTS)
            } else {
                setTimeout(reject, 5000, { message: 'Products Not Found' })
            }
        })
    }
}
module.exports = new ProductService()


src/index.js
const productService = require('./services/product.service')

function main() {
    //call async service
    console.log('start')
    productService.findAll()
        .then(products => {
            console.log(products)
        })
        .catch(err => {
            console.log(err)
        })
    console.log('end')
}
main()

Using Promises: with async...await
....................................
src/index.js
const productService = require('./services/product.service')

async function main() {

    try {
        const products = await productService.findAll()
        console.log(products)
    }
    catch (err) {
        console.log(err)
    }

}
main()

Case Study:

CURD operations:

Create USER service, having users data like id,name,status (array of users)

1.return all users
2.return user by id
3.insert new user
4.update existing user
5.remove existing user

Note: js array apis for insert,delete,update,find
.....................................................................................
			   ES 6 module pattern
.....................................................................................

How to share code and how to import code?

export,export default == exports and module.exports

import === require()

src/util/mylib.js

//pack the code 
//exports.firstName = 'Subramanian'
export const firstName ='Subramanian'
export const lastName = 'Murugan'
export const salary = 1000
export const status = true
export const address = {
    city: 'Coimbatore'
}
export const skills = ['Java', 'JavaScript', 'Node.js']
export const saySomething = () => "something"

src/index.js
import { firstName,lastName,salary } from "./util/mylib";

console.log(firstName,lastName,salary)

node src/index.js
(node:17360) Warning: To load an ES module, set "type": "module" in the package.json or use the .mjs extension.
(Use `node --trace-warnings ...` to show where the warning was created)
E:\session\IBM\2022\sep\nodejsmicroservice\moduleapps\src\index.js:1
import { firstName,lastName,salary } from "./util/mylib";
^^^^^^

SyntaxError: Cannot use import statement outside a module
    at Object.compileFunction (node:vm:352:18)
    at wrapSafe (node:internal/modules/cjs/loader:1033:15)
    at Module._compile (node:internal/modules/cjs/loader:1069:27)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1159:10)
    at Module.load (node:internal/modules/cjs/loader:981:32)
    at Function.Module._load (node:internal/modules/cjs/loader:822:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:77:12)
    at node:internal/main/run_main_module:17:47

Node.js does not support es6 modules directly....

How to run es 6 modules in node?

There are many ways

1.Using build tools
  convert es 6 module code into cjs code using tools like webpack

2.Using latest node configuration 

 2.1.save all node files with "fileName.mjs" extension

src/util/mylib.mjs
//export packs the code via object only...

export const firstName = 'Subramanian'
export const lastName = 'Murugan'
export const age = 18
export const status = true
export const skills = ['js', 'react', 'node']
export const sayHello = () => 'Hello'

src/index.mjs
import { firstName, lastName, status, age, skills, sayHello } from './util/mylib.mjs'

function main() {
    console.log(firstName, lastName, status, age, skills, sayHello())
}
main()

node src/index.mjs

2.2.Using package.json configuration.

  create package.json file

{
  "name": "es6modules",
  "version": "1.0.0",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": ""
}

src/util/myutil.js
export const firstName = 'Subramanian'
export const lastName = 'Murugan'
export const age = 18
export const status = true
export const skills = ['js', 'react', 'node']
export const sayHello = () => 'Hello'

src/index.js
import { firstName, lastName, status, age, skills, sayHello } from './util/myutil.js'

function main() {
    console.log(firstName, lastName, status, age, skills, sayHello())
}
main()

....................................................................................
			export default
....................................................................................

Rules:

1.single item can be exported from a file
2.more than one export default is not allowed in a single file
3.You can mix multiple export and single export default in a single file.

src/services/todo.service.js

// export default class TodoService {

//     findAll() {
//         return [{ id: 1, text: 'learn node' }]
//     }
// }

// export default  Token = 'token'

export const token = 'mytoken'

class TodoService {

    findAll() {
        return [{ id: 1, text: 'learn node' }]
    }
}
export default TodoService

src/index.js
import TodoService, { token } from "./services/todo.service.js"

function main() {
    let todoService = new TodoService()
    console.log(todoService.findAll())
    console.log(token)
}
main()

package.json
{
  "name": "es6modules",
  "version": "1.0.0",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": ""
}











